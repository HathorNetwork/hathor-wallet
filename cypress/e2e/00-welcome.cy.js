function setTermsAccepted() {
  cy.session('localStorage', () => {
    localStorage.setItem('localstorage:started', 'true');
  })
}

describe('welcome and wallet type selection', () => {
  it('should render the welcome page', () => {
    cy.clearLocalStorage();
    cy.visit('/');
    cy.findByText(/Welcome to Hathor Wallet/i)
      .should("have.length", 1);
  });

  it('should only allow clicking the button after accepting terms', () => {
    cy.visit('/');

    // Click
    const buttonLabel = 'Get started'
    cy.findByText(buttonLabel).click();

    // Recipe from: https://glebbahmutov.com/cypress-examples/8.7.0/recipes/form-validation.html
    cy.get('form').then(
      ($form) => expect($form[0].checkValidity()).to.be.false,
    )

    // Agree and click again
    cy.get('#confirmAgree').click();
    cy.findByText(buttonLabel).click();

    // Should be on wallet selection screen
    cy.contains('software');
    cy.contains('hardware');
  })

  it('should not display the welcome screen after accepting terms', () => {
    setTermsAccepted();
    cy.visit('/');

    cy.findByText(/Welcome to Hathor Wallet/i)
      .should("have.length", 0);

    // Should be on wallet selection screen
    cy.contains('software');
    cy.contains('hardware');
  })

  it('should require check confirm before starting a software wallet', () => {
    setTermsAccepted();
    cy.visit('/');
    cy.findByText('Software wallet').click();

    // Should be on software wallet warning screen
    cy.contains('Using a software wallet is not the safest way');
    const continueButton = 'Continue';
    cy.findByText(continueButton).click();
    cy.get('form').then(
      ($form) => expect($form[0].checkValidity()).to.be.false,
    )

    // Agree and click again
    cy.get('#confirmWallet').click();
    cy.findByText(continueButton).click();

    cy.contains('You can start a new wallet or import data');
  })
});

describe('create a new wallet and back it up', () => {
  const passwd = 'Abc1234%';
  const pin = '123456';

  beforeEach(() => {
    setTermsAccepted();
    cy.visit('/');
    cy.findByText('Software wallet').click();
    cy.get('#confirmWallet').click();
    cy.findByText('Continue').click();
  })

  it('should create a new wallet', () => {
    // Navigate to the "Software Wallet" screen after the warning);
    cy.contains('You can start a new wallet or import data');

    // Start the "New Wallet" use case
    cy.findByText('New wallet').click();
    cy.contains('A new wallet is generated by 24 words');

    // Check that it requires clicking the confirmation checkbox
    const continueButton = 'Create my words';
    cy.findByText(continueButton).click();
    cy.get('form').then(
      ($form) => expect($form[0].checkValidity()).to.be.false,
    )

    // Agree and click again
    cy.get('#confirmWallet').click();
    cy.findByText(continueButton).click();

    // Confirm we're in the new words screen
    cy.contains('Your words have been created!');
    cy.findByText('Do it later').click();

    // Fill the password field with short password
    cy.contains('Please, choose a password')
    cy.get('input[placeholder="Password"]').type('abc');
    cy.get('input[placeholder="Confirm Password"]').type('abc');
    cy.findByText('Next').click();
    cy.get('#passwordWrapperForm').then(
      ($form) => expect($form[0].checkValidity()).to.be.false,
    )

    // Fill the password field with non-matching values
    cy.get('input[placeholder="Password"]').clear();
    cy.get('input[placeholder="Confirm Password"]').clear();
    cy.get('input[placeholder="Password"]').type(passwd);
    cy.get('input[placeholder="Confirm Password"]').type(passwd.split('').reverse().join(''));
    cy.findByText('Next').click();
    cy.contains('Both fields must be equal');
    cy.contains('Please, choose a password')

    // Fill the password field properly
    cy.get('input[placeholder="Password"]').clear();
    cy.get('input[placeholder="Confirm Password"]').clear();
    cy.get('input[placeholder="Password"]').type(passwd);
    cy.get('input[placeholder="Confirm Password"]').type(passwd);
    cy.findByText('Next').click();

    // Password was successful
    cy.contains('The PIN is a 6-digit password');

    // Fill the PIN field with invalid characters
    cy.get('input[placeholder="PIN"]').type('abc');
    cy.get('input[placeholder="Confirm PIN"]').type('abc');
    cy.findByText('Next').click();
    cy.get('#passwordWrapperForm').then(
      ($form) => expect($form[0].checkValidity()).to.be.false,
    )

    // Fill the PIN field with non-matching values
    cy.get('input[placeholder="PIN"]').clear();
    cy.get('input[placeholder="Confirm PIN"]').clear();
    cy.get('input[placeholder="PIN"]').type(pin);
    cy.get('input[placeholder="Confirm PIN"]').type(pin.split('').reverse().join(''));
    cy.findByText('Next').click();
    cy.contains('Both fields must be equal');
    cy.contains('The PIN is a 6-digit password'); // This should be immediate

    // Fill the PIN field properly
    cy.get('input[placeholder="PIN"]').clear();
    cy.get('input[placeholder="Confirm PIN"]').clear();
    cy.get('input[placeholder="PIN"]').type(pin);
    cy.get('input[placeholder="Confirm PIN"]').type(pin);
    cy.findByText('Next').click();

    // PIN was successful
    cy.contains('Loading transactions'); // For a few seconds this screen will be shown

    // After a possibly large amount of time, the fullnode will have answered the empty tx history for the new wallet
    cy.contains('Total: 0.00 HTR', { timeout: 20000 });
    cy.contains(`You haven't done the backup`);
  })
})
