/**
 * Sets the localstorage with the flag indicating the "Welcome" screen terms were already accepted
 * @see import('../../src/storage').STARTED_KEY
 */
function setTermsAccepted() {
  cy.session('localStorage', () => {
    localStorage.setItem('localstorage:started', 'true');
  })
}

/**
 * Asserts that the given form is invalid
 * @param {keyof HTMLElementTagNameMap} [selector='form'] Selector that fetched the form in the HTML.
 * If empty, it will assume there is only one single form on screen and select it
 * @see https://glebbahmutov.com/cypress-examples/recipes/form-validation.html
 * @example
 * cy.findByText('Next').click();
 * assertFormIsInvalid('#myForm');
 * cy.contains('You need to type something before continuing');
 */
function assertFormIsInvalid(selector) {
  cy.get(selector || 'form').then(
    ($form) => expect($form[0].checkValidity()).to.be.false,
  )
}

describe('welcome and wallet type selection', () => {
  it('should render the welcome page', () => {
    cy.clearLocalStorage();
    cy.visit('/');
    cy.findByText(/Welcome to Hathor Wallet/i)
      .should("have.length", 1);
    cy.compareSnapshot('welcome-screen');
  });

  it('should only allow clicking the button after accepting terms', () => {
    cy.visit('/');

    // Click
    const buttonLabel = 'Get started'
    cy.findByText(buttonLabel).click();

    assertFormIsInvalid();

    // Agree and click again
    cy.get('#confirmAgree').click();
    cy.findByText(buttonLabel).click();

    // Should be on wallet selection screen
    cy.contains('software');
    cy.contains('hardware');
    cy.compareSnapshot('wallet-type-screen');
  })

  it('should not display the welcome screen after accepting terms', () => {
    setTermsAccepted();
    cy.visit('/');

    cy.findByText(/Welcome to Hathor Wallet/i)
      .should("have.length", 0);

    // Should be on wallet selection screen
    cy.contains('software');
    cy.contains('hardware');
  })

  it('should require check confirm before starting a software wallet', () => {
    setTermsAccepted();
    cy.visit('/');
    cy.findByText('Software wallet').click();

    // Should be on software wallet warning screen
    cy.contains('Using a software wallet is not the safest way');
    cy.compareSnapshot('soft-warning-screen');
    const continueButton = 'Continue';
    cy.findByText(continueButton).click();
    assertFormIsInvalid();

    // Agree and click again
    cy.get('#confirmWallet').click();
    cy.findByText(continueButton).click();

    cy.contains('You can start a new wallet or import data');
    cy.compareSnapshot('soft-init-screen');
  })
});

describe('create a new wallet and back it up', () => {
  const passwd = 'Abc1234%';
  const pin = '123456';

  beforeEach(() => {
    setTermsAccepted();
    cy.visit('/');
    cy.findByText('Software wallet').click();
    cy.get('#confirmWallet').click();
    cy.findByText('Continue').click();
  })

  it('should create a new wallet successfully with no backup', () => {
    // Navigate to the "Software Wallet" screen after the warning);
    cy.contains('You can start a new wallet or import data');

    // Start the "New Wallet" use case
    cy.findByText('New wallet').click();
    cy.contains('A new wallet is generated by 24 words');
    cy.compareSnapshot('soft-words-explanation-screen');

    // Check that it requires clicking the confirmation checkbox
    const continueButton = 'Create my words';
    cy.findByText(continueButton).click();
    assertFormIsInvalid();

    // Agree and click again
    cy.get('#confirmWallet').click();
    cy.findByText(continueButton).click();

    // Confirm we're in the new words screen and skip the backup words flow
    cy.contains('Your words have been created!');
    cy.findByText('Do it later').click();

    // Fill the password field with short password
    cy.contains('Please, choose a password')
    cy.compareSnapshot('password-screen');
    cy.get('input[placeholder="Password"]').type('abc');
    cy.get('input[placeholder="Confirm Password"]').type('abc');
    cy.findByText('Next').click();
    assertFormIsInvalid();

    // Fill the password field with non-matching values
    cy.get('input[placeholder="Password"]').clear();
    cy.get('input[placeholder="Confirm Password"]').clear();
    cy.get('input[placeholder="Password"]').type(passwd);
    cy.get('input[placeholder="Confirm Password"]').type(passwd.split('').reverse().join(''));
    cy.findByText('Next').click();
    cy.contains('Both fields must be equal');
    cy.contains('Please, choose a password')

    // Fill the password field properly
    cy.get('input[placeholder="Password"]').clear();
    cy.get('input[placeholder="Confirm Password"]').clear();
    cy.get('input[placeholder="Password"]').type(passwd);
    cy.get('input[placeholder="Confirm Password"]').type(passwd);
    cy.findByText('Next').click();

    // Password was successful
    cy.contains('The PIN is a 6-digit password');
    cy.compareSnapshot('pin-screen');

    // Fill the PIN field with invalid characters
    cy.get('input[placeholder="PIN"]').type('abc');
    cy.get('input[placeholder="Confirm PIN"]').type('abc');
    cy.findByText('Next').click();
    assertFormIsInvalid();

    // Fill the PIN field with non-matching values
    cy.get('input[placeholder="PIN"]').clear();
    cy.get('input[placeholder="Confirm PIN"]').clear();
    cy.get('input[placeholder="PIN"]').type(pin);
    cy.get('input[placeholder="Confirm PIN"]').type(pin.split('').reverse().join(''));
    cy.findByText('Next').click();
    cy.contains('Both fields must be equal');
    cy.contains('The PIN is a 6-digit password'); // This should be immediate

    // Fill the PIN field properly
    cy.get('input[placeholder="PIN"]').clear();
    cy.get('input[placeholder="Confirm PIN"]').clear();
    cy.get('input[placeholder="PIN"]').type(pin);
    cy.get('input[placeholder="Confirm PIN"]').type(pin);
    cy.findByText('Next').click();

    // PIN was successful
    cy.contains('Loading transactions'); // For a few seconds this screen will be shown
    cy.compareSnapshot('loading-txs-screen');

    // After a possibly large amount of time, the fullnode will have answered the empty tx history for the new wallet
    cy.contains('Total: 0.00 HTR', { timeout: 20000 });
    cy.contains(`You haven't done the backup`);
  })

  it('should backup words and handle fullnode failure', () => {
    // Navigate to the "Software Wallet" screen after the warning);
    cy.contains('You can start a new wallet or import data');

    // Start the "New Wallet" use case
    cy.findByText('New wallet').click();
    cy.contains('A new wallet is generated by 24 words');

    // Confirm and continue
    const continueButton = 'Create my words';
    cy.get('#confirmWallet').click();
    cy.findByText(continueButton).click();

    // Confirm we're in the new words screen and enter the backup words flow
    cy.contains('Your words have been created!');
    cy.compareSnapshot('soft-words-created-screen');
    cy.findByText('Backup now').click();

    // Store the words for validating
    let backupWords = [];
    cy.get('#hiddenWordsForTest').invoke('text').then(text => {
      backupWords = text.split(' ');
    });
    cy.findByText('Ok, I have saved them').click();

    // Insert the first word correctly
    let currentIndex = 1;
    let correctWord = '';
    cy.get('h2.validation-step-index').invoke('text').then(text => {
      currentIndex = parseInt(text, 10);
      correctWord = backupWords[currentIndex - 1];
      cy.findByText(correctWord).click();
    })

    // Insert wrong second word
    cy.get('h2.validation-step-index').invoke('text').then(text => {
      currentIndex = parseInt(text, 10) || 1;
      correctWord = backupWords[currentIndex - 1];

      cy.findByText(correctWord)
        .closest('section')
        .children() // Get all child divs
        .filter((index, element) => {
          return element.innerText !== correctWord; // Keep only divs where key is not correct
        })
        .first()
        .click();
    })
    cy.contains('Wrong word.');

    // Restart the process and select all correct words
    cy.findByText('Click here to start the process again.').click();
    cy.findByText('Ok, I have saved them').click();
    for (let i = 0; i < 5; i++) {
      cy.get('h2.validation-step-index').invoke('text').then(text => {
        currentIndex = parseInt(text, 10);
        correctWord = backupWords[currentIndex - 1];
        cy.findByText(correctWord).click();
      })
    }

    // Fill the password field properly
    cy.get('input[placeholder="Password"]').clear();
    cy.get('input[placeholder="Confirm Password"]').clear();
    cy.get('input[placeholder="Password"]').type(passwd);
    cy.get('input[placeholder="Confirm Password"]').type(passwd);
    cy.findByText('Next').click();

    // Fill the PIN field properly, and prepare a stub not to wait for the fullnode response
    cy.get('input[placeholder="PIN"]').clear();
    cy.get('input[placeholder="Confirm PIN"]').clear();
    cy.get('input[placeholder="PIN"]').type(pin);
    cy.get('input[placeholder="Confirm PIN"]').type(pin);

    cy.intercept('*/thin_wallet/address_history*', (req) => {
      req.reply({
        statusCode: 500,
        body: {
          history: [],
        },
      });
    });

    cy.findByText('Next').click();

    // PIN was successful
    cy.contains('Loading transactions'); // For a few seconds this screen will be shown

    // There is a timeout in place that needs to be waited. The error should be handled gracefully
    cy.contains('Request failed', { timeout: 15000 });
  })
})
